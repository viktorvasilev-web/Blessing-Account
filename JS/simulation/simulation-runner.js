// JS/simulation/simulation-runner.js
import { getMementoForCard } from '/JS/calculateAxieValue/calculateMemento.js';

/* ---------------- helpers ---------------- */

function isVisible(el) {
    if (!el) return false;
    if (el.classList.contains('hidden')) return false;
    const style = window.getComputedStyle(el);
    return style.display !== 'none' && style.visibility !== 'hidden' && style.opacity !== '0';
}

function getEffectiveLevel(baseLevel, sim) {
    return sim?.enabled && sim.levelOverride != null ? sim.levelOverride : baseLevel;
}
function getEffectiveBreed(baseBreed, sim) {
    return sim?.enabled && sim.breedOverride != null ? sim.breedOverride : baseBreed;
}

/** –ù–æ—Ä–º–∞–ª–∏–∑–∏—Ä–∞ –∫—ä–º —Ü–µ–Ω–æ–≤–∏ –∫–ª—é—á–æ–≤–µ: Aqua –≤–º–µ—Å—Ç–æ Aquatic. */
function normalizePriceKey(k) {
    if (!k) return k;
    return k === 'Aquatic' ? 'Aqua' : k;
}

/** –°—Ç—Ä–æ–∏ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–∞ —Ü–µ–Ω–æ–≤–∞ –∫–∞—Ä—Ç–∞ –æ—Ç –±–∞–∑–æ–≤–∞—Ç–∞ + —Å–∏–º—É–ª–∞—Ü–∏–æ–Ω–Ω–∏—Ç–µ overrides */
function buildEffectivePriceMap(basePrices, sim) {
    const out = { ...(basePrices || {}) };
    if (!sim?.enabled) return out;

    if (sim.priceOverrides && Object.keys(sim.priceOverrides).length) {
        for (const [k, v] of Object.entries(sim.priceOverrides)) {
            out[normalizePriceKey(k)] = v;
        }
    } else if (sim.priceMultiplier && sim.priceMultiplier !== 1) {
        for (const k of Object.keys(out)) out[k] = out[k] * sim.priceMultiplier;
    }
    return out;
}

/* ---------------- dataset overrides (–Ω–µ –ø–∏–ø–∞–º–µ HTML —Å—Ç—Ä—É–∫—Ç—É—Ä–∞) ---------------- */

function storeBaseDatasetOnce(card) {
    if (!card.dataset.levelBase) card.dataset.levelBase = card.dataset.level ?? '';
    if (!card.dataset.breedBase) card.dataset.breedBase = card.dataset.breed ?? '';
}

function applyDatasetOverridesToVisible(sim) {
    const cards = Array.from(document.querySelectorAll('#axieContainer .axie-card'));
    for (const card of cards) {
        // –≤–∏–Ω–∞–≥–∏ –ø–∞–∑–∏–º –±–∞–∑–∞—Ç–∞, –Ω–æ override –ø—Ä–∞–≤–∏–º —Å–∞–º–æ –Ω–∞ –≤–∏–¥–∏–º–∏—Ç–µ
        storeBaseDatasetOnce(card);
        if (!isVisible(card)) continue;

        const baseLevel = parseInt(card.dataset.levelBase || card.dataset.level, 10);
        const baseBreed = parseInt(card.dataset.breedBase || card.dataset.breed, 10);
        if (!Number.isFinite(baseLevel) || !Number.isFinite(baseBreed)) continue;

        const effLevel = getEffectiveLevel(baseLevel, sim);
        const effBreed = getEffectiveBreed(baseBreed, sim);

        // –≤–∞–∂–µ–Ω –º–æ–º–µ–Ω—Ç: —Å–º–µ–Ω—è–º–µ –¢–ï–ö–£–©–ò–¢–ï data-* (–∏–∑—Ç–æ—á–Ω–∏–∫ –∑–∞ —Ç–≤–æ–∏—Ç–µ —Ñ–æ—Ä–º—É–ª–∏)
        card.dataset.level = String(effLevel);
        card.dataset.breed = String(effBreed);
        card.dataset.simApplied = '1'; // –º–∞—Ä–∫–µ—Ä (–∑–∞ –¥–µ–±—ä–≥)
    }
}

function restoreDatasetToBase() {
    const cards = Array.from(document.querySelectorAll('#axieContainer .axie-card'));
    for (const card of cards) {
        if (card.dataset.levelBase != null) card.dataset.level = card.dataset.levelBase;
        if (card.dataset.breedBase != null) card.dataset.breed = card.dataset.breedBase;
        delete card.dataset.simApplied;
    }
}

/* ---------------- price overrides (–±–µ–∑ –¥–∞ –ø–∏–ø–∞–º–µ –±—É—Ç–æ–Ω–∏—Ç–µ) ---------------- */

function snapshotBasePricesIfNeeded() {
    if (!window.__MEMENTO_PRICES_BASE__ && window.__MEMENTO_PRICES__) {
        // –ø–∞–∑–∏–º ‚Äû–∏—Å—Ç–∏–Ω–∞—Ç–∞‚Äú –≤–µ–¥–Ω—ä–∂ (–Ω–æ—Ä–º–∞–ª–∏–∑–∏—Ä–∞–Ω–∏—è map –æ—Ç mementobuttons.js)
        window.__MEMENTO_PRICES_BASE__ = { ...window.__MEMENTO_PRICES__ };
    }
}

function applyPriceOverrides(sim) {
    // –≤–∑–∏–º–∞–º–µ –±–∞–∑–∞—Ç–∞ (–∞–∫–æ –∏–º–∞ snapshot) –∏–ª–∏ —Ç–µ–∫—É—â–∏—Ç–µ
    const base = window.__MEMENTO_PRICES_BASE__ || window.__MEMENTO_PRICES__ || {};
    const effective = buildEffectivePriceMap(base, sim);
    window.__MEMENTO_PRICES__ = effective; // üëâ —Ç–≤–æ—è—Ç –ø–∞–π–ø–ª–∞–π–Ω —â–µ —á–µ—Ç–µ —Ç–æ–≤–∞
}

function restoreBasePrices() {
    if (window.__MEMENTO_PRICES_BASE__) {
        window.__MEMENTO_PRICES__ = { ...window.__MEMENTO_PRICES_BASE__ };
    }
}

/* ---------------- VISUAL helpers (—Å–∞–º–æ –ø–æ–∫–∞–∑–≤–∞—Ç –¥–∞–Ω–Ω–∏—Ç–µ –æ—Ç data-*) ---------------- */

function setVisualLevel(card, lvl) {
    const lvSpan = card.querySelector('.level-badge-value');
    if (lvSpan) { lvSpan.textContent = String(lvl); return; }
    const badge = card.querySelector('.level-badge');
    if (badge) badge.textContent = String(lvl);
}

function setVisualBreed(card, breed) {
    const box = card.querySelector('.breed-info');
    if (!box) return;
    const img = box.querySelector('img');
    const imgHtml = img ? img.outerHTML : '';
    box.innerHTML = `${imgHtml} ${breed}`;
}

/** –∏–∑–≤–ª–∏—á–∞ {Class: count,...} –æ—Ç —Ä–µ–∑—É–ª—Ç–∞—Ç–∞ –Ω–∞ getMementoForCard; –∏–≥–Ω–æ—Ä–∏—Ä–∞ 'total' */
function extractClassMemento(mementoResult) {
    if (!mementoResult) return {};
    const map = mementoResult.classMemento ? mementoResult.classMemento : mementoResult;
    const out = {};
    for (const [k, v] of Object.entries(map)) {
        if (String(k).toLowerCase() === 'total') continue;
        out[k] = v;
    }
    return out;
}

/** –û–±–Ω–æ–≤—è–≤–∞ —Ç–µ–∫—Å—Ç–æ–≤–µ—Ç–µ xN –≤ .memento-breakdown —Å–ø–æ—Ä–µ–¥ –Ω–æ–≤–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ */
function updateMementoBreakdown(card) {
    const lvl = parseInt(card.dataset.level, 10);
    const breed = parseInt(card.dataset.breed, 10);
    const cls = card.dataset.class;

    if (!Number.isFinite(lvl) || !Number.isFinite(breed) || !cls) return;

    // üÜï –í–∫–ª—é—á–≤–∞–º–µ Memento –∏ (–ø–æ –∂–µ–ª–∞–Ω–∏–µ) SpecialCollection
    const row = {
        ID: card.dataset.id,
        Class: cls,
        BreedCount: breed,
        Level: lvl,
        Memento: card.dataset.memento || '',                               // <‚Äî –≤–∞–∂–Ω–æ –∑–∞ –≤—Ç–æ—Ä–æ—Å—Ç–µ–ø–µ–Ω–Ω–∏—Ç–µ
        specialCollection: card.dataset.hasCollection === 'true' ? '{}' : '',
        SpecialCollection: card.getAttribute('data-special-collection') || ''
    };

    // 1) –∫–∞–ª–∫—É–ª–∞—Ü–∏—è
    const mementoRes = getMementoForCard(row) || {};
    const mapRaw = mementoRes.classMemento ? mementoRes.classMemento : mementoRes;

    // –Ω–æ—Ä–º–∞–ª–∏–∑–∏—Ä–∞–Ω–∏ –∫–ª—é—á–æ–≤–µ (Aquatic‚ÜíAqua) –≤ lower-case
    const classMap = {};
    for (const [k, v] of Object.entries(mapRaw)) {
        const kk = String(k).toLowerCase().trim();
        if (kk === 'total') continue;
        const norm = (k === 'Aquatic' ? 'aqua' : kk);
        classMap[norm] = Number(v) || 0;
    }

    // 2) –æ–±–Ω–æ–≤—è–≤–∞–º–µ –Ω–∞–ª–∏—á–Ω–∏—Ç–µ —Å–ø–∞–Ω–æ–≤–µ (–Ω–µ –¥–æ–±–∞–≤—è–º–µ/–º–∞—Ö–∞–º–µ –Ω–æ–≤–∏)
    const spans = card.querySelectorAll('.memento-breakdown .memento-class');
    spans.forEach(span => {
        const img = span.querySelector('img');
        const titleRaw = (img?.getAttribute('title') || img?.getAttribute('alt') || '').trim();
        const keyNorm = (titleRaw === 'Aquatic' ? 'aqua' : titleRaw.toLowerCase());
        const val = classMap[keyNorm] ?? 0;

        if (img) {
            const icon = img.cloneNode(true);
            span.innerHTML = '';
            span.appendChild(icon);
            span.appendChild(document.createTextNode(' x' + val));
        } else {
            span.textContent = 'x' + val;
        }
    });
}

function updateVisualsFromDataset(onlyVisible = true) {
    const cards = Array.from(document.querySelectorAll('#axieContainer .axie-card'));
    const simOn = !!(window.__AXIE_SIMULATION__ && window.__AXIE_SIMULATION__.enabled);
    for (const card of cards) {
        if (onlyVisible && !isVisible(card)) continue;

        const lvl = parseInt(card.dataset.level, 10);
        const brd = parseInt(card.dataset.breed, 10);
        if (Number.isFinite(lvl)) setVisualLevel(card, lvl);
        if (Number.isFinite(brd)) setVisualBreed(card, brd);

        // –æ–±–Ω–æ–≤–∏ –∏ –≤–∏–∑—É–∞–ª–Ω–∏—Ç–µ Memento –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ø–æ—Ä–µ–¥ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–∏—Ç–µ –¥–∞–Ω–Ω–∏
        updateMementoBreakdown(card);

        // –≤–∏–∑—É–∞–ª–µ–Ω –º–∞—Ä–∫–µ—Ä
        if (simOn) card.classList.add('simulated'); else card.classList.remove('simulated');
    }
}

/* ---------------- THEME helper ---------------- */
function toggleReptileTheme(isOn) {
    // –ê–∫–æ –∏–º–∞—à –∏ –≥–ª–æ–±–∞–ª–Ω–∞ dark —Ç–µ–º–∞, –º–æ–∂–µ—à –¥–∞ —è –∞–∫—Ç–∏–≤–∏—Ä–∞—à –ø–∞—Ä–∞–ª–µ–ª–Ω–æ:
    // document.body.classList.toggle('dark', !!isOn);
    document.body.classList.toggle('theme-reptile', !!isOn);
}

/* ---------------- core ---------------- */

export function applySimulationToVisibleCards() {
    const sim = window.__AXIE_SIMULATION__ || {};
    const recalc = () => {
        if (typeof window.updateAllMinValues === 'function') {
            try { window.updateAllMinValues(); } catch (e) { console.warn('updateAllMinValues error:', e); }
        }
    };

    if (!sim.enabled) {
        // 1) –≤—ä—Ä–Ω–∏ dataset –∫—ä–º –±–∞–∑–æ–≤–∏—Ç–µ
        restoreDatasetToBase();
        // 2) –≤—ä—Ä–Ω–∏ —Ü–µ–Ω–∏—Ç–µ –∫—ä–º –±–∞–∑–æ–≤–∏—Ç–µ
        restoreBasePrices();
        // 3) –ø—É—Å–Ω–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª–Ω–∏—è —Ç–∏ –ø–∞–π–ø–ª–∞–π–Ω (Value/Profit/–≤—Å–∏—á–∫–æ)
        recalc();
        // 4) –≤–∏–∑—É–∞–ª–Ω–æ –æ—Ç—Ä–∞–∑–∏ –±–∞–∑–æ–≤–∏—Ç–µ Level/Breed + Memento (—Å–∞–º–æ –≤–∏–¥–∏–º–∏—Ç–µ)
        updateVisualsFromDataset(true);

        /* üÜï OFF ‚Üí –∏–∑–∫–ª—é—á–∏ —Ç–µ–º–∞—Ç–∞ */
        toggleReptileTheme(false);
        return;
    }

    // —Å–∏–º—É–ª–∞—Ü–∏—è ON:
    // 1) –±–∞–∑–æ–≤–∏ —Ü–µ–Ω–∏ ‚Üí —Å–Ω–∏–º–∫–∞ (—Å–∞–º–æ –≤–µ–¥–Ω—ä–∂), –ø–æ—Å–ª–µ –ø—Ä–∏–ª–æ–∂–∏ overrides (–º–Ω–æ–∂–∏—Ç–µ–ª/–ø–µ—Ä-–∫–ª–∞—Å)
    snapshotBasePricesIfNeeded();
    applyPriceOverrides(sim);

    // 2) –ø–æ–¥–∞–π –µ—Ñ–µ–∫—Ç–∏–≤–Ω–∏ Level/Breed –ø—Ä–µ–∑ data-* —Å–∞–º–æ –Ω–∞ –í–ò–î–ò–ú–ò–¢–ï –∫–∞—Ä—Ç–∏
    restoreDatasetToBase();               // (–ø–æ—á–∏—Å—Ç–∏ —Å—Ç–∞—Ä–∏ overrides, –∞–∫–æ –∏–º–∞)
    applyDatasetOverridesToVisible(sim);  // (—Å–∞–º–æ —Ç–µ–∫—É—â–æ –≤–∏–¥–∏–º–∏—Ç–µ)

    // 3) –ø—É—Å–Ω–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª–Ω–∏—è –ø–∞–π–ø–ª–∞–π–Ω
    recalc();

    // 4) –≤–∏–∑—É–∞–ª–Ω–æ –æ—Ç—Ä–∞–∑–∏ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–∏—Ç–µ Level/Breed + Memento (—Å–∞–º–æ –≤–∏–¥–∏–º–∏—Ç–µ)
    updateVisualsFromDataset(true);

    /* üÜï ON ‚Üí –≤–∫–ª—é—á–∏ —Ç–µ–º–∞—Ç–∞ */
    toggleReptileTheme(true);
}

/* ---------------- listeners ---------------- */

export function attachSimulationListeners() {
    // –ü—Ä–∏ –ø—Ä–æ–º—è–Ω–∞ –æ—Ç –º–µ–Ω—é—Ç–æ
    document.addEventListener('simulation:change', () => {
        window.requestAnimationFrame(applySimulationToVisibleCards);
    });

    // –ü—Ä–∏ —Ñ–∏–ª—Ç—Ä–∏—Ä–∞–Ω–µ (–ø—Ä–æ–º–µ–Ω—è —Å–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ—Ç–æ –≤–∏–¥–∏–º–∏ –∫–∞—Ä—Ç–∏)
    document.addEventListener('filters:applied', () => {
        window.requestAnimationFrame(applySimulationToVisibleCards);
    });

    // –ü—Ä–∏ –æ–±–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ —Ü–µ–Ω–∏ –æ—Ç Sheets ‚Äî –∞–∫–æ —Å–∏–º—É–ª–∞—Ü–∏—è—Ç–∞ –µ –∞–∫—Ç–∏–≤–Ω–∞: –ø—Ä–µ–∏–∑—á–∏—Å–ª–∏ —Å —Ç–µ–∫—É—â–∞—Ç–∞ –±–∞–∑–∞
    document.addEventListener('prices:updated', () => {
        if (window.__AXIE_SIMULATION__?.enabled) {
            // –æ–±–Ω–æ–≤–∏ snapshot –∫—ä–º –ø–æ—Å–ª–µ–¥–Ω–∞—Ç–∞ –±–∞–∑–∞ –∏ –ø—Ä–µ–∏–∑—á–∏—Å–ª–∏
            window.__MEMENTO_PRICES_BASE__ = { ...(window.__MEMENTO_PRICES__ || {}) };
            window.requestAnimationFrame(applySimulationToVisibleCards);
        }
    });

    // üÜï –ø—Ä–∏ –ø—ä—Ä–≤–æ–Ω–∞—á–∞–ª–Ω–æ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ ‚Äì —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–∞–π —Ç–µ–º–∞—Ç–∞ —Å—ä—Å —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ —Å–∏–º—É–ª–∞—Ü–∏—è—Ç–∞
    const syncTheme = () => toggleReptileTheme(!!(window.__AXIE_SIMULATION__ && window.__AXIE_SIMULATION__.enabled));

    // –ü—Ä–∏ –ø—ä—Ä–≤–æ–Ω–∞—á–∞–ª–Ω–æ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ ‚Äì –∞–∫–æ —Å–∏–º—É–ª–∞—Ü–∏—è—Ç–∞ –µ –∞–∫—Ç–∏–≤–Ω–∞
    if (document.readyState === 'complete' || document.readyState === 'interactive') {
        syncTheme();
        if (window.__AXIE_SIMULATION__?.enabled) {
            window.requestAnimationFrame(applySimulationToVisibleCards);
        }
    } else {
        document.addEventListener('DOMContentLoaded', () => {
            syncTheme();
            if (window.__AXIE_SIMULATION__?.enabled) {
                window.requestAnimationFrame(applySimulationToVisibleCards);
            }
        });
    }
}
